var documenterSearchIndex = {"docs":
[{"location":"manual/benchmarks/#Benchmarks","page":"Benchmarks","title":"Benchmarks","text":"","category":"section"},{"location":"manual/benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Benchmarks of time spent on model construction with different number of variables (see benchmark notebook for details) with  IndexedVarArray (model_indexed) and SparseAxisArray (model_sparse_aa) illustrate the potential improvement in model generation time:","category":"page"},{"location":"manual/benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"(Image: )","category":"page"},{"location":"manual/benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Time spent on model construction can vary a lot depending on the level of sparsity (here constructed by varying sparsity level through parameter DP):","category":"page"},{"location":"manual/benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"(Image: )","category":"page"},{"location":"manual/get_started/#Get-Started","page":"Get started","title":"Get Started","text":"","category":"section"},{"location":"manual/get_started/#Usage","page":"Get started","title":"Usage","text":"","category":"section"},{"location":"manual/get_started/","page":"Get started","title":"Get started","text":"using JuMP\nusing SparseVariables\nusing HiGHS\n\nconst SV = SparseVariables\n\nm = Model()\n\ncars = [\"ford\", \"bmw\", \"opel\"]\nyears = [2000, 2001, 2002, 2003]\n\ncar_cost = SparseArray(Dict(\n    (\"ford\", 2000) => 100,\n    (\"ford\", 2001) => 150,\n    (\"bmw\", 2001) => 200,\n    (\"bmw\", 2002) => 300\n    ))\n\n\n# Empty variables with 2 indices and allowed index values specified\n# by `car` and `year`, using `container=IndexedVarArray`\n@variable(m, y[car=cars, year=years]; container=IndexedVarArray)\n@variable(m, z[car=cars, year=years]; container=IndexedVarArray)\n# Dynamic creation of variables\nfor (cr, yr) in keys(car_cost)\n    insertvar!(y, cr, yr)\nend\n\n# Inserting values not in the defined value sets errors:\nfor c in [\"opel\", \"tesla\", \"nikola\"]\n    insertvar!(z, c, 2002)\nend\n# output\nERROR: BoundsError: attempt to access IndexedVarArray{VariableRef, 2, Tuple{String, Int64}} with 1 entry at index [\"tesla\", 2002]\n","category":"page"},{"location":"manual/get_started/","page":"Get started","title":"Get started","text":"# Skip tests for allowed values for maximum performance.\n# Note that this will allow creating values outside the defined\n# sets, as long as the type is correct.\nfor c in [\"opel\", \"tesla\", \"nikola\"]\n    unsafe_insertvar!(z, c, 2002)\nend\n\n# Inefficient iteration, but 0 contribution for non-existing variables\n@constraint(m, sum(y[c,i] + z[c,i] for c in cars, i in years) <= 300)\n\n# Slicing over selected indices\n@constraint(m, sum(y[:, 2000]) <= 300)\n\n# Efficient filtering using select syntax\nfor i in years\n    @constraint(m, sum(car_cost[c,i] * y[c,i] for (c,i) in SV.select(y, :, i)) <= 300)\nend\n\n# Filter using functions on indices\n@constraint(m, sum(z[endswith(\"a\"), iseven]) >= 1)\n\n# Solve m\nset_optimizer(m, optimizer_with_attributes(HiGHS.Optimizer, MOI.Silent()=>true))\noptimize!(m)\n\ntermination_status(m)\n\n# output\n\nOPTIMAL::TerminationStatusCode = 1\n","category":"page"},{"location":"manual/get_started/#Solution-information","page":"Get started","title":"Solution information","text":"","category":"section"},{"location":"manual/get_started/","page":"Get started","title":"Get started","text":"The Tables.jl support has now been upstreamed to JuMP, and is also supported for IndexedVarArrays, which makes it easy to get solutions for all indices at once and e.g. save to a CSV file or import into a DataFrame:","category":"page"},{"location":"manual/get_started/","page":"Get started","title":"Get started","text":"# Fetch solution\ntab = JuMP.Containers.rowtable(value, y)\n\n# Save to CSV\nusing CSV\nCSV.write(\"result.csv\", tab)\n\n# Convert to DataFrame\nusing DataFrames\nDataFrame(tab)\n\n# output\n\n4×3 DataFrame\n Row │ car     year   value\n     │ String  Int64  Float64\n─────┼────────────────────────\n   1 │ bmw      2001      1.5\n   2 │ ford     2001      0.0\n   3 │ ford     2000      3.0\n   4 │ bmw      2002      1.0","category":"page"},{"location":"manual/get_started/","page":"Get started","title":"Get started","text":"The results may also be pretty-printed in the terminal using PrettyTables:","category":"page"},{"location":"manual/get_started/","page":"Get started","title":"Get started","text":"using PrettyTables\npretty_table(tab)\n\n# output\n\n┌────────┬───────┬─────────┐\n│    car │  year │   value │\n│ String │ Int64 │ Float64 │\n├────────┼───────┼─────────┤\n│    bmw │  2001 │     1.5 │\n│   ford │  2001 │     0.0 │\n│   ford │  2000 │     3.0 │\n│    bmw │  2002 │     1.0 │\n└────────┴───────┴─────────┘","category":"page"},{"location":"reference/api/#API-Reference","page":"API reference","title":"API Reference","text":"","category":"section"},{"location":"reference/api/","page":"API reference","title":"API reference","text":"SparseArray\nIndexedVarArray\ninsertvar!\nunsafe_insertvar!\n#SafeInsert\n#UnsafeInsert","category":"page"},{"location":"reference/api/#SparseVariables.SparseArray","page":"API reference","title":"SparseVariables.SparseArray","text":"SparseArray{T,N, K <: NTuple{N,Any} }\n\nImplementation of an AbstractSparseArray where data is stored in a dictionary. \n\n\n\n\n\n","category":"type"},{"location":"reference/api/#SparseVariables.IndexedVarArray","page":"API reference","title":"SparseVariables.IndexedVarArray","text":"IndexedVarArray{V,N,T}\n\nStructure for holding an optimization variable with a sparse structure with extra indexing\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#SparseVariables.insertvar!","page":"API reference","title":"SparseVariables.insertvar!","text":"insertvar!(var::IndexedVarArray{V,N,T}, index...)\n\nInsert a new variable with the given index only after checking if keys are valid and not already defined.\n\n\n\n\n\n","category":"function"},{"location":"reference/api/#SparseVariables.unsafe_insertvar!","page":"API reference","title":"SparseVariables.unsafe_insertvar!","text":"unsafe_insertvar!(var::indexedVarArray{V,N,T}, index...)\n\nInsert a new variable with the given index withouth checking if the index is valid or   already assigned.\n\n\n\n\n\n","category":"function"},{"location":"#SparseVariables","page":"Introduction","title":"SparseVariables","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Add container type(s) for improved performance and easier handling of sparse data  and sparse arrays of optimizaton variables in JuMP. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Watch the JuliaCon/JuMP-dev 2022 lightning talk and check out the notebook with examples and benchmarks: ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: SparseVariables - Efficient sparse modelling with JuMP)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Some motivational benchmark demonstrate that SparseVariables (model_sparse) can give similar performance to manually constructing efficent indices (model_incremental), but with a much simpler and and more modeller-friendly syntax, while outperforming alternative implementations:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: )","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Time spent on model construction can vary a lot depending on the level of sparsity (here constructed by varying sparsity level through parameter DP):","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: )","category":"page"}]
}
